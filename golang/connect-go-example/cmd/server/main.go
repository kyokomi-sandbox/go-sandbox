package main

import (
	"context"
	"errors"
	"fmt"
	"log"
	"net/http"
	"time"

	"example/cmd/interceptor"

	"github.com/bufbuild/connect-go"
	"golang.org/x/net/http2"
	"golang.org/x/net/http2/h2c"
	"google.golang.org/genproto/googleapis/rpc/errdetails"
	"google.golang.org/protobuf/types/known/durationpb"

	greetv1 "example/gen/greet/v1"        // generated by protoc-gen-go
	"example/gen/greet/v1/greetv1connect" // generated by protoc-gen-connect-go
)

type GreetServer struct{}

func (s *GreetServer) Greet(
	ctx context.Context,
	req *connect.Request[greetv1.GreetRequest],
) (*connect.Response[greetv1.GreetResponse], error) {
	log.Println("Request headers: ", req.Header())

	if err := ctx.Err(); err != nil {
		return nil, err // automatically coded correctly
	}

	if err := validateGreetRequest(req.Msg); err != nil {
		return nil, connect.NewError(connect.CodeInvalidArgument, err)
	}

	greeting, err := doGreetWork(ctx, req.Msg)
	if err != nil {
		return nil, connect.NewError(connect.CodeUnknown, err)
	}

	res := connect.NewResponse(&greetv1.GreetResponse{
		Greeting: greeting,
	})
	res.Header().Set("Greet-Version", "v1")
	res.Header().Set(
		"Greet-Emoji",
		connect.EncodeBinaryHeader([]byte("👋")),
	)
	return res, nil
}

func validateGreetRequest(msg *greetv1.GreetRequest) error {
	if msg.Name == "" {
		return errors.New("ぬるぽ")
	}
	return nil
}

func doGreetWork(ctx context.Context, msg *greetv1.GreetRequest) (string, error) {
	if msg.Name == "test" {
		return "", errors.New("unknown test")
	}
	return fmt.Sprintf("Hello, %s!", msg.Name), nil
}

func newTransientError() error {
	err := connect.NewError(
		connect.CodeUnavailable,
		errors.New("overloaded: back off and retry"),
	)
	retryInfo := &errdetails.RetryInfo{
		RetryDelay: durationpb.New(10 * time.Second),
	}
	if detail, detailErr := connect.NewErrorDetail(retryInfo); detailErr == nil {
		err.AddDetail(detail)
	}
	return err
}

func main() {
	interceptors := connect.WithInterceptors(interceptor.NewAuthInterceptor())

	// NOTE: muxを入れ子にすることでpathPrefixをつけることができるが、gRPCには対応しなくなる
	mux := http.NewServeMux()
	path, handler := greetv1connect.NewGreetServiceHandler(
		&GreetServer{},
		interceptors,
	)
	mux.Handle(path, handler)

	http.ListenAndServe(
		"localhost:8080",
		// Use h2c so we can serve HTTP/2 without TLS.
		h2c.NewHandler(mux, &http2.Server{}),
	)
}
