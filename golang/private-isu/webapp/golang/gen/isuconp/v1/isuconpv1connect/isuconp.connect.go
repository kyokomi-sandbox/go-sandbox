// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: isuconp/v1/isuconp.proto

package isuconpv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "isuconp/gen/isuconp/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// IsuconpServiceName is the fully-qualified name of the IsuconpService service.
	IsuconpServiceName = "isuconp.v1.IsuconpService"
)

// IsuconpServiceClient is a client for the isuconp.v1.IsuconpService service.
type IsuconpServiceClient interface {
	Initialize(context.Context, *connect_go.Request[v1.InitializeRequest]) (*connect_go.Response[v1.InitializeResponse], error)
	GetLogin(context.Context, *connect_go.Request[v1.GetLoginRequest]) (*connect_go.Response[v1.GetLoginResponse], error)
}

// NewIsuconpServiceClient constructs a client for the isuconp.v1.IsuconpService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIsuconpServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) IsuconpServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &isuconpServiceClient{
		initialize: connect_go.NewClient[v1.InitializeRequest, v1.InitializeResponse](
			httpClient,
			baseURL+"/isuconp.v1.IsuconpService/Initialize",
			opts...,
		),
		getLogin: connect_go.NewClient[v1.GetLoginRequest, v1.GetLoginResponse](
			httpClient,
			baseURL+"/isuconp.v1.IsuconpService/GetLogin",
			opts...,
		),
	}
}

// isuconpServiceClient implements IsuconpServiceClient.
type isuconpServiceClient struct {
	initialize *connect_go.Client[v1.InitializeRequest, v1.InitializeResponse]
	getLogin   *connect_go.Client[v1.GetLoginRequest, v1.GetLoginResponse]
}

// Initialize calls isuconp.v1.IsuconpService.Initialize.
func (c *isuconpServiceClient) Initialize(ctx context.Context, req *connect_go.Request[v1.InitializeRequest]) (*connect_go.Response[v1.InitializeResponse], error) {
	return c.initialize.CallUnary(ctx, req)
}

// GetLogin calls isuconp.v1.IsuconpService.GetLogin.
func (c *isuconpServiceClient) GetLogin(ctx context.Context, req *connect_go.Request[v1.GetLoginRequest]) (*connect_go.Response[v1.GetLoginResponse], error) {
	return c.getLogin.CallUnary(ctx, req)
}

// IsuconpServiceHandler is an implementation of the isuconp.v1.IsuconpService service.
type IsuconpServiceHandler interface {
	Initialize(context.Context, *connect_go.Request[v1.InitializeRequest]) (*connect_go.Response[v1.InitializeResponse], error)
	GetLogin(context.Context, *connect_go.Request[v1.GetLoginRequest]) (*connect_go.Response[v1.GetLoginResponse], error)
}

// NewIsuconpServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIsuconpServiceHandler(svc IsuconpServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/isuconp.v1.IsuconpService/Initialize", connect_go.NewUnaryHandler(
		"/isuconp.v1.IsuconpService/Initialize",
		svc.Initialize,
		opts...,
	))
	mux.Handle("/isuconp.v1.IsuconpService/GetLogin", connect_go.NewUnaryHandler(
		"/isuconp.v1.IsuconpService/GetLogin",
		svc.GetLogin,
		opts...,
	))
	return "/isuconp.v1.IsuconpService/", mux
}

// UnimplementedIsuconpServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIsuconpServiceHandler struct{}

func (UnimplementedIsuconpServiceHandler) Initialize(context.Context, *connect_go.Request[v1.InitializeRequest]) (*connect_go.Response[v1.InitializeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("isuconp.v1.IsuconpService.Initialize is not implemented"))
}

func (UnimplementedIsuconpServiceHandler) GetLogin(context.Context, *connect_go.Request[v1.GetLoginRequest]) (*connect_go.Response[v1.GetLoginResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("isuconp.v1.IsuconpService.GetLogin is not implemented"))
}
